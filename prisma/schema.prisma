// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  forums        Forum[]
  posts         Post[]
  comments      Comment[]
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Forum {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  tags        String[]
  category    String? @default("General")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creatorId   String   @db.ObjectId
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  posts       Post[]
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  forumId     String   @db.ObjectId
  forum       Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  postId      String   @db.ObjectId
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  parentId    String?  @db.ObjectId
  parent      Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[] @relation("CommentToComment")
} 